{% set farm = grains['farm_name'] %}
{% set domain = grains['domain'] %}
{% set environment = grains['node_env'] %}
{% set alf_type = grains['ALFRESCO_LICENSE_TYPE'] %}
{% set myID = grains['id'] %}
{% set alf_ver = grains['ALFRESCO_VERSION'] %}
{% set email = grains['ALERT_EMAIL'] %}

###############################
## Common Alfresco Properties #
###############################

dir.root=/mnt/alf_data

alfresco.context=alfresco

{% if grains['farm_role_index'] == 1 %}
alfresco.host={{ farm }}.{{ domain }}

{% elif grains ['farm_role_index'] == 2 %}
alfresco.host={{ farm }}-b.{{ domain }}
{% endif %}

alfresco.port=8443
alfresco.protocol=https

share.context=share

{% if grains['farm_role_index'] == 1 %}
share.host={{ farm }}

{% elif grains ['farm_role_index'] == 2 %}
share.host={{ farm }}-b

{% endif %}

share.port=8443
share.protocol=https

### database connection properties ###
db.driver=org.postgresql.Driver
db.username=alfresco
db.password=alfresco
db.name=alfresco
# probably can up this to same as max connections in db configuration (currently 275)
db.pool.max=275

{% if grains['node_type'] == 'alfresco' %}

{% for host, ip in salt['mine.get']('G@node_type:db', 'network.ip_addrs', expr_form='compound').items() %}
{% if grains['farm_name'] in myID and host.startswith(grains['farm_name']) %}
#Configure Database in the same farm as the server. 
db.url=jdbc:postgresql://{{ ip[0] }}:5432/${db.name}
{% endif %}
{% endfor %}

{% elif grains['node_type'] == 'allinone' %}
db.url=jdbc:postgresql://localhost:5432/${db.name}
{% endif %}

## Install Enterprise license if this is an enterprise host. 
{% if grains['ALFRESCO_LICENSE_TYPE'] == 'enterprise' %}
## License file pulled from SaltMaster
dir.license.external={{ pillar['tomcat_home'] }}/shared/classes/alfresco/extension/license/

{% endif %}

### FTP Server Configuration ###
ftp.enabled=false
ftp.port=2121

### RMI service ports ###
alfresco.rmi.services.port=50500
avm.rmi.service.port=0
avmsync.rmi.service.port=0
attribute.rmi.service.port=0
authentication.rmi.service.port=0
repo.rmi.service.port=0
action.rmi.service.port=0
deployment.rmi.service.port=0

### External executable locations ###
ooo.exe=/usr/lib64/libreoffice/program/soffice.bin
ooo.enabled=true
ooo.port=8100
img.root=/opt/local/alfresco-{{ alf_ver }}/common
img.dyn=${img.root}/lib
img.exe=/usr/bin/convert
swf.exe=/usr/local/bin/pdf2swf
swf.languagedir=/opt/local/alfresco-{{ alf_ver }}/common/japanese

jodconverter.enabled=false
jodconverter.officeHome=/opt/local/alfresco-{{ alf_ver }}/libreoffice
jodconverter.portNumbers=8100

### Initial admin password ###
alfresco_user_store.adminpassword=becedb42ec3c5c7f965255338be4453c

### E-mail site invitation setting ###
notification.email.siteinvite=false

### License location ###
#dir.license.external=/opt/local/alfresco-{{ alf_ver }}

### Solr indexing ###
index.subsystem.name=lucene
dir.keystore=${dir.root}/keystore
#solr.port.ssl=8443
index.recovery.mode = AUTO
index.tracking.disableInTransactionIndexing = false

### BPM Engine ###
system.workflow.engine.jbpm.enabled=false

{% if grains['ALFRESCO_LICENSE_TYPE'] == 'community' %}

###############################################################################
# The default authentication chain
# To configure external authentication subsystems see:
# http://wiki.alfresco.com/wiki/Alfresco_Authentication_Subsystems
#-------------

######AUTHENTIFICATION CHAIN####
authentication.chain=ldap1:ldap,alfrescoNtlm1:alfrescoNtlm

###### SYNCHRONISATION SETTINGS ####
# http://docs.alfresco.com/4.0/index.jsp?topic=%2Fcom.alfresco.enterprise.doc%2Fconcepts%2Fauth-ldap-intro.html

# Specifies whether to create a user with default properties when a user is successfully authenticated, who does not yet exist in Alfresco, and was not returned by a differential sync (if enabled with the property above). The default is true. Setting this to false allows you to restrict Alfresco to a subset of those users who could be authenticated by LDAP; only those created by synchronization are allowed to log in. You can control the set of users in this more restricted set by overriding the user query properties of the LDAP authentication subsystem.
synchronization.autoCreatePeopleOnLogin=true

# Specifies if the scheduled synchronization job is run in differential mode. The default is false, which means that the scheduled sync job is run in full mode. Regardless of this setting a differential sync may still be triggered when a user is successfully authenticated who does not yet exist in Alfresco.
synchronization.synchronizeChangesOnly=false

# Specifies whether to trigger a differential sync when the subsystem starts up. The default is true. This ensures that when user registries are first configured, the bulk of the synchronization work is done on server startup, rather than on the first login.
synchronization.syncOnStartup=true

# Specifies whether to trigger a differential sync when a user is successfully authenticated who does not yet exist in Alfresco. The default is true.
synchronization.syncWhenMissingPeopleLogIn=true

# Specifies if deletion of local users and groups is allowed. See the sections on Synchronization deletion and Collision resolution for the circumstances under which this may happen. The default is true. If false, then no sync job will be allowed to delete users or groups during the handling of removals or collision resolution.
synchronization.allowDeletions=false

### DONT USE UNIX CRON EXPRESSION- USE QUARTZ CRON EXPRESSIONS!!!
### look here http://www.quartz-scheduler.org/docs/tutorials/crontrigger.html
### synchronisation starts every 60 minutes!
synchronization.import.cron=0 0/60 * * * ?
{% endif %}

# disable services - only enable if necessary
# disable google
googledocs.enabled=false
googledocs.googleeditable.enabled=false
# turn off cloud sync and cifs
syncService.mode=OFF
cifs.enabled=false

{% if grains['node_env'] == 'dev' %} 
###############################################################################
# [CYL]  Override the SMTP defaults - no need to authenticate to send email messages, so null out username
#mail.host = {{ pillar['mail_host'] }}
mail.testmessage.send = true
#mail.testmessage.to = {{ email }}
#mail.username =
# mail.from.default = {{ salt['cmd.run']('hostname') }}@{{ salt['cmd.run']('hostname') }}.nomagic.com
activities.feed.notifier.enabled=false

{% elif grains['node_env'] == 'stage' %}
## Disable by default. 
###############################################################################
# [CYL]  Override the SMTP defaults - no need to authenticate to send email messages, so null out username
#mail.host = {{ pillar['mail_host'] }}
mail.testmessage.send = false
#mail.testmessage.to = {{ email }}
#mail.username =
#mail.from.default = swong@sheldon.jpl.nasa.gov
# mail.from.default = {{ salt['cmd.run']('hostname') }}@{{ salt['cmd.run']('hostname') }}.jpl.nasa.gov
activities.feed.notifier.enabled=false

{% elif grains['node_env'] == 'engineer' %}
## Disable by default. 
################################################################################
## [CYL]  Override the SMTP defaults - no need to authenticate to send email messages, so null out username
##mail.host = {{ pillar['mail_host'] }}
mail.testmessage.send = false
##mail.testmessage.to = {{ email }}
##mail.username =
##mail.from.default = swong@sheldon.jpl.nasa.gov
## mail.from.default = {{ salt['cmd.run']('hostname') }}@{{ salt['cmd.run']('hostname') }}.jpl.nasa.gov
activities.feed.notifier.enabled=false

{% elif grains['node_env'] == 'prod' %}
# [CYL]  Override the SMTP defaults - no need to authenticate to send email messages, so null out username
mail.host = {{ pillar['mail_host'] }}
mail.testmessage.send = true
mail.testmessage.to = {{ email }}
mail.username = {{ pillar['mail_user'] }}
mail.from.default = {{ pillar['mail_user'] }}
mail.password = {{ pillar['mail_password'] }}

mail.testmessage.subject=Outbound SMTP
mail.testmessage.text=The Outbound SMTP email subsystem is working
activities.feed.notifier.enabled=false

activities.feed.notifier.enabled = false

replication.enabled=true
replication.transfer.readonly=true
{% endif %}
